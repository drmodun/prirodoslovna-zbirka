// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //directUrl = env("DIRECT_URL") // if using neondb cloud db
}

enum Role {
  SUPER
  ADMIN
  USER
}

enum ExponatKind {
  PROCARIOT
  EUCARIOT
  MINERAL
}

enum MemberRole {
  ADMIN
  MEMBER
}

enum County {
  SPLITSKO_DALMATINSKA
  DUBROVACKO_NERETVANSKA
  SIBENSKO_KNINSKA
  ZADARSKA
  ZAGREBACKA
  KARLOVACKA
  VARAZDINSKA
  KOPRIVNICKO_KRIZEVACKA
  KRAPINSKO_ZAGORSKA
  MEDIMURSKA
  OSIJECKO_BARANJSKA
  POZESKO_SLAVONSKA
  PRIMORSKO_GORANSKA
  SISACKO_MOSLAVACKA
  VUKOVARSKO_SRIJEMSKA
  GRAD_ZAGREB
  BJELOVARSKO_BILOGORSKA
  BRODSKO_POSAVSKA
  ISTARSKA
  LICKO_SENJSKA
  VIROVITICKO_PODRAVSKA
  OTHER
}

model Categorization {
  id      String    @id @default(uuid())
  genus   String
  kingdom String
  domain  String
  phylum  String
  class   String
  order   String
  family  String
  Exponat Exponat[]
  //possibly change this to make the categorization applicable to other organisations which will use this exponat
}

model User {
  id                       String                    @id @default(uuid())
  email                    String                    @unique
  firstName                String
  bio                      String                    @default("Homo sapiens u biosferi")
  lastName                 String
  password                 String
  hasProfileImage          Boolean                   @default(false)
  activationCode           String                    @default(uuid()) //this creates unique code for user
  role                     Role                      @default(USER)
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @default(now()) @updatedAt
  Posts                    Post[]
  location                 County
  OrganisationUser         OrganisationUser[]
  Likes                    Like[]
  FavouriteExponat         FavouriteExponat?
  UserOrganisationFollower UserOrganisationFollower?
  followers                UserFollows[]             @relation("following")
  following                UserFollows[]             @relation("follower")
}

model Exponat {
  id               String             @id @default(uuid())
  name             String
  alternateName    String
  ExponatKind      ExponatKind
  description      String
  isApproved       Boolean            @default(false)
  funFacts         String[]
  attributes       Json
  mainImage        String
  categorizationId String?
  Categorization   Categorization?    @relation(fields: [categorizationId], references: [id], onDelete: Cascade)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt
  Organisation     Organisation?      @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  organisationId   String?
  FavouriteExponat FavouriteExponat[]
  Posts            Post[]
}

model Organisation {
  id                        String                     @id @default(uuid())
  name                      String
  websiteUrl                String
  description               String
  email                     String                     @unique
  isApproved                Boolean                    @default(false)
  mainImage                 String
  otherImages               String[]
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @default(now()) @updatedAt
  location                  County
  OrganisationPosts         SocialPost[]
  Exponats                  Exponat[]
  OrganisationUsers         OrganisationUser[]
  UserOrganisationFollowers UserOrganisationFollower[]
}

model Post {
  id         String   @id @default(uuid())
  title      String
  images     String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  isApproved Boolean  @default(false)
  Likes      Like[]
  ExponatId  String?
  Exponat    Exponat? @relation(fields: [ExponatId], references: [id], onDelete: Cascade)
}

model SocialPost {
  id           String       @id @default(uuid())
  title        String
  text         String
  images       String[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now()) @updatedAt
  authorId     String       @unique
  organisation Organisation @relation(fields: [authorId], references: [id], onDelete: Cascade)
  isApproved   Boolean      @default(false)
}

model OrganisationUser {
  role           MemberRole
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  organisationId String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String

  @@id([organisationId, userId])
}

model Like {
  createdAt DateTime @default(now())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([postId, userId])
}

model FavouriteExponat {
  createdAt DateTime @default(now())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ExponatId String
  Exponat   Exponat  @relation(fields: [ExponatId], references: [id], onDelete: Cascade)

  @@id([ExponatId, userId])
}

model UserOrganisationFollower {
  createdAt      DateTime     @default(now())
  userId         String       @unique
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organisationId String
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)

  @@id([organisationId, userId])
}

model UserFollows {
  follower   User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String
  followee   User   @relation("following", fields: [followeeId], references: [id], onDelete: Cascade)
  followeeId String

  @@id([followerId, followeeId])
}
