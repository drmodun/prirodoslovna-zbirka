// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //directUrl = env("DIRECT_URL") // if using neondb cloud db
}

enum Role {
  SUPER
  ADMIN
  USER
}

enum ExponatKind {
  PROCARIOT
  EUCARIOT
  MINERAL
}

enum WorkType {
  JOURNAL
  BOOK
  GENERIC
  BOOK_SECTION
  CONFERENCE_PROCEEDINGS
  WORKING_PAPER
  REPORT
  WEB_PAGE
  THESIS
  MAGAZINE_ARTICLE
  STATUTE
  PATENT
  NEWSPAPER_ARTICLE
  COMPUTER_PROGRAM
  HEARING
  TELEVISION_BROADCAST
  ENCYCLOPEDIA_ARTICLE
  CASE
  FILM
  BILL
}

enum MemberRole {
  OWNER
  ADMIN
  MEMBER
  REQUESTED
}

enum County {
  SPLITSKO_DALMATINSKA
  DUBROVACKO_NERETVANSKA
  SIBENSKO_KNINSKA
  ZADARSKA
  ZAGREBACKA
  KARLOVACKA
  VARAZDINSKA
  KOPRIVNICKO_KRIZEVACKA
  KRAPINSKO_ZAGORSKA
  MEDIMURSKA
  OSIJECKO_BARANJSKA
  POZESKO_SLAVONSKA
  PRIMORSKO_GORANSKA
  SISACKO_MOSLAVACKA
  VUKOVARSKO_SRIJEMSKA
  GRAD_ZAGREB
  BJELOVARSKO_BILOGORSKA
  BRODSKO_POSAVSKA
  ISTARSKA
  LICKO_SENJSKA
  VIROVITICKO_PODRAVSKA
  OTHER
}

enum NotificationType {
  POST_APPROVAL
  EXPONAT_APPROVAL
  MEMBERSHIP_REQUEST
  MEMBERSHIP_CHANGE
  NEW_FOLLOWER
  POST_BY_FOLLOWED_ACCOUNT
  EXPONAT_BY_FOLLOWED_ORGANISATION
  WORK_BY_FOLLOWED_ORGANISATION
  ORGANISATION_APPROVAL
  NEW_SOCIAL_POST
  POINT_MILESTONE
  OTHER
}

model Categorization {
  id         String    @id @default(uuid())
  genus      String?
  kingdom    String?
  domain     String?
  phylum     String?
  class      String?
  order      String?
  family     String?
  speciesKey Int?
  species    String    @unique
  Exponat    Exponat[]
  //possibly change this to make the categorization applicable to other organisations which will use this exponat
}

model User {
  id                          String                     @id @default(uuid())
  email                       String                     @unique
  firstName                   String
  bio                         String                     @default("Homo sapiens u biosferi")
  lastName                    String
  username                    String
  password                    String
  hasProfileImage             Boolean                    @default(false)
  activationCode              String                     @unique @default(uuid())
  role                        Role                       @default(USER)
  createdAt                   DateTime                   @default(now())
  updatedAt                   DateTime                   @default(now()) @updatedAt
  Posts                       Post[]
  location                    County
  OrganisationUser            OrganisationUser[]
  isActivated                 Boolean                    @default(false)
  Likes                       Like[]
  FavouriteExponats           FavouriteExponat[]
  UserOrganisationFollower    UserOrganisationFollower[]
  followers                   UserFollows[]              @relation("following")
  following                   UserFollows[]              @relation("follower")
  Works                       Work[]                     @relation("author")
  ApprovedWorks               Work[]                     @relation("approver")
  SavedWorks                  SavedWorks[]
  SavedLiterature             SavedLiterature[]
  UserNotification            UserNotification[]
  IsEmailNotificationsEnabled Boolean                    @default(true)
}

model Exponat {
  id                 String             @id @default(uuid())
  name               String
  alternateName      String
  ExponatKind        ExponatKind
  description        String
  isApproved         Boolean            @default(true)
  funFacts           String[]
  attributes         Json
  mainImage          String
  categorizationId   String?
  Categorization     Categorization?    @relation(fields: [categorizationId], references: [id], onDelete: Cascade)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @default(now()) @updatedAt
  Organisation       Organisation?      @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  organisationId     String?
  FavouriteExponats  FavouriteExponat[]
  IsNotificationMade Boolean            @default(false) //Made to check wether a notification has already been made
  Posts              Post[]
}

model Organisation {
  id                        String                     @id @default(uuid())
  name                      String
  websiteUrl                String
  description               String
  email                     String                     @unique
  isApproved                Boolean                    @default(true)
  mainImage                 String
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @default(now()) @updatedAt
  location                  County
  OrganisationPosts         SocialPost[]
  Exponats                  Exponat[]
  OrganisationUsers         OrganisationUser[]
  UserOrganisationFollowers UserOrganisationFollower[]
  Work                      Work[]
}

model Post {
  id                 String   @id @default(uuid())
  title              String
  image              String
  text               String
  thumbnailImage     String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt
  authorId           String
  author             User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  isApproved         Boolean  @default(true)
  IsNotificationMade Boolean  @default(false)
  Likes              Like[]
  ExponatId          String?
  Exponat            Exponat? @relation(fields: [ExponatId], references: [id], onDelete: Cascade)
}

model SocialPost {
  id           String       @id @default(uuid())
  title        String
  text         String
  image        String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now()) @updatedAt
  authorId     String       @unique
  organisation Organisation @relation(fields: [authorId], references: [id], onDelete: Cascade)
  isApproved   Boolean      @default(true)
}

model OrganisationUser {
  role           MemberRole   @default(REQUESTED)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  organisationId String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String

  @@id([organisationId, userId])
}

model Like {
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([postId, userId])
}

model FavouriteExponat {
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ExponatId String
  Exponat   Exponat  @relation(fields: [ExponatId], references: [id], onDelete: Cascade)

  @@id([ExponatId, userId])
}

model UserOrganisationFollower {
  createdAt      DateTime     @default(now())
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organisationId String
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)

  @@id([organisationId, userId])
}

model UserFollows {
  follower   User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String
  followee   User   @relation("following", fields: [followeeId], references: [id], onDelete: Cascade)
  followeeId String

  @@id([followerId, followeeId])
}

model Work {
  id                 String       @id @default(uuid())
  title              String
  description        String
  poster             String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @default(now()) @updatedAt
  document           String?
  IsNotificationMade Boolean      @default(false)
  presentation       String?
  authorId           String
  organisationId     String
  organisation       Organisation @relation(fields: [organisationId], references: [id])
  isApproved         Boolean      @default(false)
  approvedBy         String?
  firstPublished     DateTime?    @default(now())
  approver           User?        @relation("approver", fields: [approvedBy], references: [id], onDelete: SetNull)
  author             User         @relation("author", fields: [authorId], references: [id], onDelete: Cascade)
  userId             String?
  SavedWorks         SavedWorks[]
  tags               String[]
  type               WorkType     @default(GENERIC)
}

model SavedLiterature {
  userId       String
  literatureId String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())

  @@id([literatureId, userId])
}

model SavedWorks {
  userId    String
  workId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  work      Work     @relation(fields: [workId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([workId, userId])
}

model Notification {
  id                String             @id @default(uuid())
  title             String
  text              String?
  createdAt         DateTime           @default(now())
  link              String?
  notificationImage String?
  UserNotification  UserNotification[]
  type              NotificationType
}

model UserNotification {
  userId         String
  notificationId String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  isRead         Boolean      @default(false)

  @@id([notificationId, userId])
}
